package app.trenddc.blupermission

import android.Manifest
import android.annotation.SuppressLint
import android.bluetooth.BluetoothAdapter
import android.bluetooth.BluetoothAdapter.getDefaultAdapter
import android.bluetooth.BluetoothDevice
import android.bluetooth.BluetoothManager
import android.bluetooth.BluetoothProfile
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.content.pm.PackageManager
import android.os.Build
import android.os.Build.VERSION.SDK_INT
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.annotation.RequiresApi
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.core.app.ActivityCompat
import androidx.core.content.ContextCompat
import app.trenddc.blupermission.ui.theme.BluPermissionTheme


class MainActivity : ComponentActivity() {
    private val TAG = "MainActivity"
    private val PERMISSION_CODE = 1

    private val bluetoothAdapter: BluetoothAdapter = getDefaultAdapter();
    private val activityResultLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == RESULT_OK) {
            Log.d(TAG, ": permission granted ok")
        } else {
            Log.d(TAG, ": permission granted cancel")
        }
    }
    private val multiplePermissionsContract =
        registerForActivityResult(ActivityResultContracts.RequestMultiplePermissions()) { permissionsStatusMap ->
            if (!permissionsStatusMap.containsValue(false)) {
                // all permissions are accepted
                Log.d(TAG, "all permissions are accepted")
//                Toast.makeText(this, "all permissions are accepted", Toast.LENGTH_SHORT).show()
            } else {

                Log.d(TAG, "all permissions are not accepted")
//                Toast.makeText(this, "all permissions are not accepted", Toast.LENGTH_SHORT).show()
            }
        }


    //    @RequiresApi(Build.VERSION_CODES.S)
    private fun requestBluetoothPermission() {
//        val enableBluetoothIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
//        activityResultLauncher.launch(enableBluetoothIntent)

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            // Request Bluetooth permissions for Android 12 and higher
            multiplePermissionsContract.launch(
                arrayOf(
                    android.Manifest.permission.BLUETOOTH_CONNECT,
                    android.Manifest.permission.BLUETOOTH_SCAN,
                    android.Manifest.permission.BLUETOOTH_ADVERTISE
                )
            )
        } else {
            // Request older permissions for devices below Android 12
            multiplePermissionsContract.launch(
                arrayOf(
                    android.Manifest.permission.BLUETOOTH,
                    android.Manifest.permission.BLUETOOTH_ADMIN,
                    android.Manifest.permission.ACCESS_FINE_LOCATION,
                    android.Manifest.permission.ACCESS_COARSE_LOCATION
                )
            )
        }
    }

    fun isDeviceConnected(bluetoothDevice: BluetoothDevice, context: Context): Boolean {
        val bluetoothManager = context.getSystemService(BluetoothManager::class.java)
//        val bluetoothAdapter = bluetoothManager?.adapter

        // Check if device is connected in A2DP profile (for audio devices)
        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.BLUETOOTH_CONNECT
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            requestBluetoothPermission()
            return false
        }
        val a2dpDevices = bluetoothManager?.getConnectedDevices(BluetoothProfile.A2DP)
        if (a2dpDevices?.contains(bluetoothDevice) == true) {
            return true
        }

        // Check if device is connected in Headset profile (for hands-free/headsets)
        val headsetDevices = bluetoothManager?.getConnectedDevices(BluetoothProfile.HEADSET)
        if (headsetDevices?.contains(bluetoothDevice) == true) {
            return true
        }

//         Check if device is connected in GATT profile (for Bluetooth Low Energy devices)
        val gattDevices = bluetoothManager?.getConnectedDevices(BluetoothProfile.GATT)
        if (gattDevices?.contains(bluetoothDevice) == true) {
            return true
        }

        // Add additional profiles if needed (e.g., BluetoothProfile.PAN for tethering)

        return false // Device is not connected
    }


    @SuppressLint("MissingPermission")
    var pairDevices: Set<BluetoothDevice> = bluetoothAdapter.bondedDevices
    var discoverDevices: Set<BluetoothDevice> = emptySet()

    private val reiever = object : BroadcastReceiver() {
        override fun onReceive(context: Context?, intent: Intent?) {
            when (intent?.action) {
                BluetoothDevice.ACTION_FOUND -> {
                    val device: BluetoothDevice? =
                        intent.getParcelableExtra(BluetoothDevice.EXTRA_NAME)
                    if (device != null) {
                        val update = discoverDevices.plus(device)
                        discoverDevices = update
                    }
                    Log.d(TAG, "onReceive: Device Found")
                }

                BluetoothAdapter.ACTION_DISCOVERY_STARTED -> {
                    Log.d(TAG, "onReceive: ACTION STARTED")
                }

                BluetoothAdapter.ACTION_DISCOVERY_FINISHED -> {
                    Log.d(TAG, "onReceive: ACTION FINISHED")
                }
            }
        }

    }

    //    @SuppressLint("MissingPermission")
//    @RequiresApi(Build.VERSION_CODES.M)
    fun scan(): Set<BluetoothDevice> {

        if (ActivityCompat.checkSelfPermission(
                this,
                Manifest.permission.BLUETOOTH_SCAN
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            requestBluetoothPermission()
            return emptySet()

        }
        Log.d(TAG, "scan: Start Scan")
        if (bluetoothAdapter.isDiscovering) {
            bluetoothAdapter.cancelDiscovery()
//            bluetoothAdapter.startDiscovery()
        }
        bluetoothAdapter.startDiscovery()

        Handler(Looper.getMainLooper()).postDelayed({
            bluetoothAdapter.cancelDiscovery()
        }, 10000L)
        return discoverDevices
    }

    @SuppressLint("MissingPermission")
    var pairedDevices: Set<BluetoothDevice> = bluetoothAdapter.bondedDevices

    @RequiresApi(Build.VERSION_CODES.S)
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        val foundFilter = IntentFilter(BluetoothDevice.ACTION_FOUND)
        val startFilter = IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_STARTED)
        val endFilter = IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED)

        registerReceiver(reiever, foundFilter)
        registerReceiver(reiever, startFilter)
        registerReceiver(reiever, endFilter)

        if (!bluetoothAdapter.isEnabled) {
            requestBluetoothPermission()
        }

        if (SDK_INT >= Build.VERSION_CODES.O) {
            if (ContextCompat.checkSelfPermission(
                    baseContext, android.Manifest.permission.ACCESS_BACKGROUND_LOCATION
                ) != PackageManager.PERMISSION_GRANTED
            ) {
                ActivityCompat.requestPermissions(
                    this, arrayOf(Manifest.permission.ACCESS_BACKGROUND_LOCATION),
                    PERMISSION_CODE
                )
            }
        }

        setContent {
            var devices: Set<BluetoothDevice> by remember { mutableStateOf(emptySet()) }
            BluPermissionTheme {
                Surface(color = MaterialTheme.colorScheme.background) {
                    Scaffold(
                        topBar = { Text("") },
                        content = { paddingValues ->
                            Column(
                                modifier = Modifier
                                    .fillMaxSize()
                                    .padding(paddingValues),
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                Button(
                                    onClick = { devices = scan() }
                                ) {
                                    Text(
                                        text = "Scan",
                                        style = MaterialTheme.typography.bodyLarge
                                    )
                                }
                                Spacer(modifier = Modifier.height(10.dp))
                                Text(
                                    text = "Paired Devices",
                                    style = MaterialTheme.typography.bodyMedium
                                )
                                Spacer(modifier = Modifier.height(10.dp))
                                LazyColumn {
                                    items(pairDevices.toList()) { device ->
                                        Card(
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(horizontal = 10.dp, vertical = 5.dp),
//                                        elevation = 0.
                                        ) {
                                            Column(
                                                modifier = Modifier
                                                    .fillMaxWidth()
                                                    .padding(10.dp),
                                                verticalArrangement = Arrangement.spacedBy(10.dp)
                                            ) {
                                                Text(text = device.name)
                                                Text(text = device.address)
//                                                val gson = Gson().toJson(device.uuids)
//                                                Log.d(TAG, "onCreate: $gson")
//                                                val ParcelUuid[] = dev
//                                                for (p in device.uuids) {
//                                                    Text("uuidExtra - ${p.uuid.timestamp().toString()}")
//                                                }
                                                Text(text = device.uuids.toString())
                                                Text(
                                                    text = if (isDeviceConnected(
                                                            device,
                                                            LocalContext.current
                                                        )
                                                    ) "Connected" else "Not Connected"
                                                )

                                            }
                                        }
                                    }
                                }
//                                pairedDevices.forEach { device ->
//
//                                }
                            }
                        }
                    );
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Text(
        text = "Hello $name!",
        modifier = modifier
    )
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    BluPermissionTheme {
        Greeting("Android")
    }
}